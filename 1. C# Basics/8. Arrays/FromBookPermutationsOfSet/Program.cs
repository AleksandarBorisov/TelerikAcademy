using System;

namespace FromBookPermutationsOfSet
{
    class Program
    {
        static void Main()
        {//Това е едно решение за намиране на всички възможни пермутации, използвайки алгоритъма на Heap
            //Недостатъкът му е, че не сортира елементите възходящо
            int n = int.Parse(Console.ReadLine());
            int[] a = new int[n];
            int[] p = new int[n + 1];//Стойностите на този масив показват колко пъти трябва да се изпълни дадената размяна
            for (int k = 0; k < n; k++)//преди да се премине към следващата(това са един вид броячи и показател с коя позиция сменяме)
            {
                a[k] = k + 1;
                p[k] = k;
            }
            p[n] = n;
            int i = 1;//първите позиции за размяна да са 1 и 0
            int j = 0;
            Console.WriteLine(string.Join(" ", a));
            while (i < n)
            {
                p[i]--;
                if (i % 2 != 0)//ако i е нечетно j взима стойността която се съдържа на позиция i в помощния масив
                {//тъй като винаги в началото я намаляме с едно тя със сигурност ще бъде число по-малко от i
                    j = p[i];
                }//този if-else стейтмънт може да се представи и като j = i % 2 * p[i]
                else//ако i(или n във формулите) е четно винаги ще разменяме с първия елемент на индекс j = 0
                {//надолу е обяснено защо
                    j = 0;
                }
                int temp = a[j];
                a[j] = a[i];
                a[i] = temp;
                i = 1;
                while (p[i] == 0)//Възстановява стойностите на елементите на съответните позиции в помощния масив
                {//да бъдат равни на индексите си(началните им и съответно максимални стойности)
                    p[i] = i;//Винаги проверяваме дали първата позиция е 0
                    i++;//ако е 0 я връщаме до максималната и намаляме следващата вдясно
                }//ако пък е 1 я правим 0
                Console.WriteLine(string.Join(" ", a));
            }
            Main();
        }
    }
}